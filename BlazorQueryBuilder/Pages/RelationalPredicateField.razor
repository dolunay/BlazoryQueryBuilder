@using System.Reflection
@using System.Linq.Expressions
@using BlazorQueryBuilder.ExpressionVisitors.Extensions
@using BlazoryQueryBuilder.Shared.Extensions
@using BlazoryQueryBuilder.Shared.Util

<MudSelect Label="Field" T="string" ValueChanged="OnFieldSelected" Value="_selectedPropertyName">
    @foreach (PropertyInfo property in _selectedPropertyType.GetProperties())
    {
        <MudSelectItem Value="@property.Name" style="@(@property.PropertyType.IsClass ? "font-weight: bold" : "")">
            @property.Name.ToString()
        </MudSelectItem>
    }
</MudSelect>

@code {
    [Parameter]
    public ParameterExpression ParameterExpression { get; set; }

    [Parameter]
    public Expression PredicateExpression { get; set; }

    [Parameter]
    public Action<string> OnNavigatePathChanged { get; set; }

    [Parameter]
    public Action<Expression> OnFieldChanged { get; set; }

    private Type _selectedPropertyType;
    private string _selectedPropertyName;

    protected override void OnInitialized()
    {
        // TODO: Handle method calls with arguments in various positions
        // e.g., EF.Functions.Like(p.FirstName, "%Alice%")
        if (PredicateExpression is MethodCallExpression methodCallExpression)
        {
            // support specific method calls
            var propertyMember = methodCallExpression.Method.Name switch
            {
                "StartsWith" => (MemberExpression)methodCallExpression.Object,
                "EndsWith" => (MemberExpression)methodCallExpression.Object,
                "Like" => (MemberExpression)methodCallExpression.Arguments[1],
                _ => throw new NotSupportedException($"Method {methodCallExpression.Method.Name} is not supported")
            };

            _selectedPropertyType = propertyMember.Member.DeclaringType;
            _selectedPropertyName = propertyMember.Member.Name;
        }
        else if (PredicateExpression is BinaryExpression binaryExpression)
        {
            var propertyMember = (MemberExpression)binaryExpression.Left;
            _selectedPropertyType = propertyMember.Member.DeclaringType;
            _selectedPropertyName = propertyMember.Member.Name;
        }

        base.OnInitialized();
    }

    private void OnFieldSelected(string propertyName)
    {
        if (PredicateExpression is BinaryExpression binaryExpression)
        {
            var memberExpression = (MemberExpression)binaryExpression.Left;
            var selectedProperty = _selectedPropertyType.GetProperty(propertyName);

            if (selectedProperty.PropertyType.IsClass && selectedProperty.PropertyType != typeof(string))
            {
                var navigationPropertyExpression = memberExpression.ChangePropertyAccess(_selectedPropertyType, propertyName);
                _selectedPropertyType = navigationPropertyExpression.Type;

                selectedProperty = navigationPropertyExpression.Type.GetProperties().First();
                _selectedPropertyName = selectedProperty.Name;

                memberExpression = Expression.MakeMemberAccess(
                    navigationPropertyExpression,
                    selectedProperty);

                OnNavigatePathChanged?.Invoke(propertyName);
            }
            else
            {
                _selectedPropertyName = propertyName;
                memberExpression = memberExpression.ChangePropertyAccess(_selectedPropertyType, propertyName);
            }

            Expression valueExpression = selectedProperty.PropertyType switch
            {
                Type type when
                    type == typeof(int)
                    || type == typeof(long)
                    || type == typeof(string)
                    || type == typeof(bool) => Expression.Constant(selectedProperty.PropertyType.GetDefaultValue(), selectedProperty.PropertyType),
                Type type when
                    type == typeof(DateTime) => DateTimeExpression.New(DateTime.UtcNow),
                _ => throw new Exception("Unsupported property type")
            };

            var newBinaryExpression = Expression.MakeBinary(binaryExpression.NodeType, memberExpression, valueExpression);
            PredicateExpression = newBinaryExpression;
            OnFieldChanged?.Invoke(newBinaryExpression);
        }
        else if (PredicateExpression is MethodCallExpression methodCallExpression)
        {
        }
    }
}
