@using System.Linq.Expressions
@switch (Expression.NodeType)
{
    case ExpressionType.AndAlso:
    case ExpressionType.OrElse:
        <LogicalPredicate PredicateExpression="@GetBinaryExpression()"
                          ParameterExpression="@ParameterExpression"
                          OnChange="@Change">
        </LogicalPredicate>
        break;
    case ExpressionType.Equal:
    case ExpressionType.NotEqual:
    case ExpressionType.GreaterThan:
    case ExpressionType.LessThan:
        <RelationalPredicate PredicateExpression="@GetBinaryExpression()"
                             ParameterExpression="@ParameterExpression"
                             OnChange="@Change"
                             OnRemove="@Remove">
        </RelationalPredicate>
        break;
}

@code {

    [Parameter]
    public Expression Expression { get; set; }

    [Parameter]
    public ParameterExpression ParameterExpression { get; set; }

    [Parameter]
    public Action<BinaryExpression> OnChange { get; set; }

    [Parameter]
    public Action OnRemove { get; set; }

    private BinaryExpression GetBinaryExpression()
    {
        return Expression as BinaryExpression;
    }

    private void Change(BinaryExpression expression)
    {
        OnChange(expression);
        StateHasChanged();
    }

    public void Remove()
    {
        OnRemove();
        StateHasChanged();
    }
}