@page "/query"
@using System.Linq.Expressions
@using BlazorQueryBuilder.Models
@using System.Linq.Dynamic;
@using System.Linq.Dynamic.Core
@using System.Reflection
@using BlazorQueryBuilder.Visitors
@* Importing Microsoft.CodeAnalysis* will cause an error in the app, due to something having to do with the mono linker and long lists of assemblies
    The issues is documented here https://github.com/mono/linker/issues/379 
    Awaiting a fix *@
@*@using Microsoft.CodeAnalysis.CSharp.Scripting;
    @using Microsoft.CodeAnalysis.Scripting*@
@inject List<Worker> Workers
@inject PredicateFactory PredicateFactory
@*@inject QueryBuilderService QueryBuilderService*@
@inject QueryBuilderService<TEntity> QueryBuilderService
@typeparam TEntity

<h1>Expression</h1>
<div class="row">
    <div class="col-12">
        <LambdaComponent OnChanged="@OnChanged"
                         Lambda="@QueryBuilderService.Lambda"
                         Parameter="@QueryBuilderService.Parameter"></LambdaComponent>
    </div>
</div>

<div class="row">
    <div class="col-12">
        <button class="btn btn-primary" onclick="@RunQuery">Run Query</button>
    </div>
</div>
<div class="row">
    <div class="col-12">
        @if (!_workers.Any())
        {
            <div>No results.</div>
        }
        @foreach (var worker in _workers)
        {
            <ul>
                <li>@worker.Uin</li>
            </ul>
        }
    </div>
</div>

@functions {

    List<Worker> _workers = new List<Worker>();

    Expression<Func<TEntity, bool>> Predicate => (Expression<Func<TEntity, bool>>)QueryBuilderService.Lambda;

    [Parameter]
    string Expression { get; set; }

    protected override void OnInit()
    {
        Console.WriteLine("Selected entity: " + typeof(TEntity).Name);
        Console.WriteLine(Expression);

        if (string.IsNullOrWhiteSpace(Expression))
        {
            QueryBuilderService.LoadEntity();
        }
        else
        {
            QueryBuilderService.LoadQuery(Expression);
        }
    }

    private void RunQuery()
    {
        Func<TEntity, bool> predicate = Predicate.Compile();
    }

    private void OnChanged(Expression body)
    {
        LambdaExpression newLambda = new ReplaceLambdaBody(QueryBuilderService.Lambda, body).Replace();
        QueryBuilderService.Lambda = newLambda;
        StateHasChanged();
    }

}