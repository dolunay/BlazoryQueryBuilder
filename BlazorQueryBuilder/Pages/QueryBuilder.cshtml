@page "/query"
@using System.Linq.Expressions
@using BlazorQueryBuilder.Models
@* Importing Microsoft.CodeAnalysis* will cause an error in the app, due to something having to do with the mono linker and long lists of assemblies
    The issues is documented here https://github.com/mono/linker/issues/379 
    Awaiting a fix *@
@*@using Microsoft.CodeAnalysis.CSharp.Scripting;
    @using Microsoft.CodeAnalysis.Scripting*@
@inject List<Worker> Workers
@inject PredicateFactory PredicateFactory
@inject QueryBuilderService QueryBuilderService

<h1>Expression</h1>

<div class="row">
    <div class="col-12">
        <LambdaComponent OnChanged="@OnChanged"></LambdaComponent>
    </div>
</div>

<div class="row">
    <div class="col-12">
        <button class="btn btn-primary" onclick="@RunQuery">Run Query</button>
    </div>
    <div class="col-12">
        <button class="btn btn-primary" onclick="@LoadQuery">Load Query</button>
    </div>
</div>
<div class="row">
    <div class="col-12">
        @foreach (var worker in _workers)
        {
            <ul>
                <li>@worker.Uin</li>
            </ul>
        }
    </div>
</div>

@functions {

    List<Worker> _workers = new List<Worker>();
    private Expression<Func<Worker, bool>> _predicate;

    private async void RunQuery()
    {
        Func<Worker, bool> predicate = _predicate.Compile();
        _workers = Workers.Where(predicate).ToList();
    }

    private async void LoadQuery()
    {
    //todo: This *should* work whenever Microsoft.CodeAnalysis* (along with Roslyn) is updated to target .NET Standard 2.0 (https://github.com/dotnet/roslyn/issues/29601)
    //string query = @"worker => worker.Uin == ""123456789""";
    //var options = ScriptOptions.Default.AddReferences(typeof(Worker).Assembly);
    //Expression<Func<Worker, bool>> dynamicPredicate = await CSharpScript.EvaluateAsync<Expression<Func<Worker, bool>>>(query, options);
    //Console.WriteLine(dynamicPredicate);
    }

    private void OnChanged(Expression<Func<Worker, bool>> predicate)
    {
        Console.WriteLine("Predicate: " + predicate);
        _predicate = predicate;
        StateHasChanged();
    }

}