@using System.Linq.Expressions
@using System.Reflection
@using BlazorQueryBuilder.ExpressionVisitors.Extensions
@using BlazoryQueryBuilder.Shared.Extensions
@using BlazoryQueryBuilder.Shared.Services
@using BlazoryQueryBuilder.Shared.Util

<MudExpansionPanels>
    <MudExpansionPanel Expanded="true">
        <TitleContent>
            <MudStack Row AlignItems="AlignItems.Center">
                <MudChipSet T="string" Color="Color.Tertiary" Variant="Variant.Text" Label="true" AllClosable>
                    @foreach (var path in _navigationPath)
                    {
                        <MudChip Text="@path"></MudChip>
                    }
                </MudChipSet>
                <MudText Typo="Typo.caption">@PredicateExpression.ToString()</MudText>
            </MudStack>
        </TitleContent>
        <ChildContent>
            <MudStack Spacing="2">
                <MudStack Row>
                    <RelationalPredicateField 
                    ParameterExpression="ParameterExpression"
                    PredicateExpression="PredicateExpression"
                    OnNavigatePathChanged="OnNavigationPathChanged"
                    OnFieldChanged="OnFieldChanged">
                    </RelationalPredicateField>

                    <RelationalOperators @ref="_relationalOperators"
                    PredicateExpression="PredicateExpression"
                    OnChange="@OnOperatorChanged">
                    </RelationalOperators>

                    @if (PredicateExpression is BinaryExpression binaryExpression)
                    {

                        @switch (binaryExpression.Left.Type)
                        {
                            case Type intType when intType == typeof(int) && binaryExpression.Right is ConstantExpression intConstant:
                                <MudTextField Label="Value" T="int" Value="@((int)intConstant.Value)" ValueChanged="@OnValueChanged" />
                                break;
                            case Type stringType when stringType == typeof(string) && binaryExpression.Right is ConstantExpression stringConstant:
                                <MudTextField Label="Value" T="string" Value="@(stringConstant.Value?.ToString())" ValueChanged="@OnValueChanged" />
                                break;
                            case Type boolType when boolType == typeof(bool) && binaryExpression.Right is ConstantExpression boolConstant:
                                <MudCheckBox Label="Value" T="bool" Value="@((bool)boolConstant.Value)" ValueChanged="@OnValueChanged" />
                                break;
                            case Type dateTimeType when dateTimeType == typeof(DateTime) && binaryExpression.Right is NewExpression newDateTime:
                                <MudDatePicker Label="Value" Date="@(new DateTime((long)((ConstantExpression)newDateTime.Arguments[0]).Value))" DateChanged="@OnValueChanged" />
                                break;
                        }
                    }
                    @if (PredicateExpression is MethodCallExpression methodCallExpression)
                    {

                        // TODO: Unit test
                        if (methodCallExpression.Method.Name == "Like")
                        {
                            @switch (((MemberExpression)methodCallExpression.Arguments[1]).Type)
                            {
                                case Type intType when intType == typeof(int):
                                    <MudTextField Label="Value" T="int" Value="@((int)((ConstantExpression)methodCallExpression.Arguments[2]).Value)" ValueChanged="@OnValueChanged" />
                                    break;
                                case Type stringType when stringType == typeof(string):
                                    <MudTextField Label="Value" T="string" Value="@((string)((ConstantExpression)methodCallExpression.Arguments[2]).Value)" ValueChanged="@OnValueChanged" />
                                    break;
                                case Type boolType when boolType == typeof(bool):
                                    <MudCheckBox Label="Value" T="bool" Value="@((bool)((ConstantExpression)methodCallExpression.Arguments[2]).Value)" ValueChanged="@OnValueChanged" />
                                    break;
                                case Type dateTimeType when dateTimeType == typeof(DateTime):
                                    <MudDatePicker Label="Value" Date="@(new DateTime((long)((ConstantExpression)methodCallExpression.Arguments[2]).Value))" DateChanged="@OnValueChanged" />
                                    break;
                            }
                        }
                        @* TODO *@
                    }
                    <MudStack Row Spacing="2">
                        <MudButton Variant="Variant.Filled" OnClick="@(() => Add(ExpressionType.AndAlso))">And</MudButton>
                        <MudButton Variant="Variant.Filled" OnClick="@(() => Add(ExpressionType.OrElse))">Or</MudButton>
                        <MudButton Variant="Variant.Filled" OnClick="Remove">Remove</MudButton>
                    </MudStack>
                </MudStack>
            </MudStack>
        </ChildContent>
    </MudExpansionPanel>
</MudExpansionPanels>

@code {
    [Parameter]
    public Action<Expression> OnChange { get; set; }

    [Parameter]
    public Action OnRemove { get; set; }

    [Parameter]
    public ParameterExpression ParameterExpression { get; set; }

    [Parameter]
    public Expression PredicateExpression { get; set; }

    private RelationalOperators _relationalOperators;
    private List<string> _navigationPath = new();

    protected override void OnInitialized()
    {
        _navigationPath.Add(ParameterExpression.Type.Name);

        base.OnInitialized();
    }

    private void OnNavigationPathChanged(string propertyName)
    {
        _navigationPath.Add(propertyName);
        StateHasChanged();
    }

    private void OnFieldChanged(Expression expression)
    {
        _relationalOperators.UpdateExpression(expression);

        UpdateExpression(expression);
    }

    private void OnValueChanged(int intValue) => UpdateValue(intValue);

    private void OnValueChanged(string stringValue) => UpdateValue(stringValue);

    private void OnValueChanged(bool boolValue) => UpdateValue(boolValue);

    private void OnValueChanged(DateTime? dateTime)
    {
        if (dateTime.HasValue)
        {
            UpdateValue((Expression)DateTimeExpression.New(dateTime.Value));
        }
    }

    private void UpdateValue<T>(T value) => UpdateValue((Expression)Expression.Constant(value, typeof(T)));

    private void UpdateValue(Expression expression)
    {
        // TODO: Unit test
        if (PredicateExpression is BinaryExpression binaryExpression)
        {
            UpdateExpression(binaryExpression.ReplaceRight(expression));
        }
        // TODO: Unit test
        else if (PredicateExpression is MethodCallExpression methodCallExpression)
        {
            if (methodCallExpression.Method.Name == "Like")
            {
                var updated = methodCallExpression.Update(methodCallExpression.Object, new[] { methodCallExpression.Arguments[0], methodCallExpression.Arguments[1], expression});
                UpdateExpression(updated);
            }
        }
    }

    private void OnOperatorChanged(Expression expression)
    {
        UpdateExpression(expression);
    }

    private void UpdateExpression(Expression expression)
    {
        PredicateExpression = expression;
        OnChange(expression);
        StateHasChanged();
    }

    private void Add(ExpressionType expressionType)
    {
        var leftOperand = Expression.MakeMemberAccess(ParameterExpression, ParameterExpression.Type.GetProperties().First());

        var rightOperandConstant = Expression.Constant(leftOperand.Type.GetDefaultValue(), leftOperand.Type);
        var rightOperand = Expression.MakeBinary(PredicateExpression.NodeType, leftOperand, rightOperandConstant);

        var expression = Expression.MakeBinary(
            expressionType,
            PredicateExpression.Copy(),
            rightOperand);

        OnChange(expression);
    }

    private void Remove()
    {
        OnRemove();
    }
}