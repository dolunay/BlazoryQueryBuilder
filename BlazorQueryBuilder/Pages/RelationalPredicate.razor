@using System.Linq.Expressions
@using System.Reflection
@using BlazorQueryBuilder.ExpressionVisitors.Extensions
@using BlazoryQueryBuilder.Shared.Extensions
@using BlazoryQueryBuilder.Shared.Services
@using BlazoryQueryBuilder.Shared.Util

<MudExpansionPanels>
    <MudExpansionPanel Expanded="true">
        <TitleContent>
            <MudStack Row AlignItems="AlignItems.Center"> 
                <MudChipSet T="string" Color="Color.Tertiary" Variant="Variant.Text" Label="true" AllClosable>
                    @foreach (var path in _navigationPath)
                    {
                        <MudChip Text="@path"></MudChip>
                    }
                </MudChipSet>
                <MudText Typo="Typo.caption">@PredicateExpression.ToString()</MudText>
            </MudStack>
        </TitleContent>
        <ChildContent>
            <MudStack Spacing="2">
                <MudStack Row>
                    <MudSelect Label="Field" T="string" ValueChanged="OnFieldChanged" Value="_selectedPropertyName">
                        @foreach (PropertyInfo property in _selectedPropertyType.GetProperties())
                        {
                            <MudSelectItem Value="@property.Name" style="@(@property.PropertyType.IsClass ? "font-weight: bold" : "")">
                                @property.Name.ToString()
                            </MudSelectItem>
                        }
                    </MudSelect>

                    @if (PredicateExpression is BinaryExpression binaryExpression)
                    {
                        <RelationalOperators @ref="_relationalOperators"
                        OnChange="@OnOperatorChanged"
                        OperandType="binaryExpression.Left.Type"
                        ExpressionOperator="@(new () { ExpressionType = PredicateExpression.NodeType })">
                        </RelationalOperators>
                        @switch (binaryExpression.Left.Type)
                        {
                            case Type intType when intType == typeof(int) && binaryExpression.Right is ConstantExpression intConstant:
                                <MudTextField Label="Value" T="int" Value="@((int)intConstant.Value)" ValueChanged="@OnValueChanged" />
                                break;
                            case Type stringType when stringType == typeof(string) && binaryExpression.Right is ConstantExpression stringConstant:
                                <MudTextField Label="Value" T="string" Value="@(stringConstant.Value?.ToString())" ValueChanged="@OnValueChanged" />
                                break;
                            case Type boolType when boolType == typeof(bool) && binaryExpression.Right is ConstantExpression boolConstant:
                                <MudCheckBox Label="Value" T="bool" Value="@((bool)boolConstant.Value)" ValueChanged="@OnValueChanged" />
                                break;
                            case Type dateTimeType when dateTimeType == typeof(DateTime) && binaryExpression.Right is NewExpression newDateTime:
                                <MudDatePicker Label="Value" Date="@(new DateTime((long)((ConstantExpression)newDateTime.Arguments[0]).Value))" DateChanged="@OnValueChanged" />
                                break;
                        }
                    }
                    @if (PredicateExpression is MethodCallExpression methodCallExpression)
                    {
                        @* TODO *@
                    }
                    <MudStack Row Spacing="2">
                        <MudButton Variant="Variant.Filled" OnClick="@(() => Add(ExpressionType.AndAlso))">And</MudButton>
                        <MudButton Variant="Variant.Filled" OnClick="@(() => Add(ExpressionType.OrElse))">Or</MudButton>
                        <MudButton Variant="Variant.Filled" OnClick="Remove">Remove</MudButton>
                    </MudStack>
                </MudStack>
            </MudStack>
        </ChildContent>
    </MudExpansionPanel>
</MudExpansionPanels>

@code {
    [Parameter]
    public Action<BinaryExpression> OnChange { get; set; }

    [Parameter]
    public Action OnRemove { get; set; }

    [Parameter]
    public ParameterExpression ParameterExpression { get; set; }

    [Parameter]
    public Expression PredicateExpression { get; set; }

    private RelationalOperators _relationalOperators;
    private RelationalOperators.Operator _selectedOperator;
    private Type _selectedPropertyType;
    private string _selectedPropertyName;
    private List<string> _navigationPath = new();

    protected override void OnInitialized()
    {
        // TODO: Handle method calls with arguments in various positions
        // e.g., EF.Functions.Like(p.FirstName, "%Alice%")
        if (PredicateExpression is MethodCallExpression methodCallExpression)
        {
            var leftOperand = (MemberExpression)methodCallExpression.Arguments[1];
            _selectedPropertyType = leftOperand.Member.DeclaringType;
            _selectedPropertyName = leftOperand.Member.Name;
            _selectedOperator = new RelationalOperators.MethodCallOperator(methodCallExpression.Method);
        }
        else if (PredicateExpression is BinaryExpression binaryExpression)
        {
            var leftOperand = (MemberExpression)binaryExpression.Left;
            _selectedPropertyType = leftOperand.Member.DeclaringType;
            _selectedPropertyName = leftOperand.Member.Name;
            _selectedOperator = new RelationalOperators.Operator { ExpressionType = binaryExpression.NodeType };
        }

        _navigationPath.Add(ParameterExpression.Type.Name);

        base.OnInitialized();
    }

    private void OnFieldChanged(string propertyName)
    {
        if (PredicateExpression is BinaryExpression binaryExpression)
        {
            var leftOperandExpression = (MemberExpression)binaryExpression.Left;
            var selectedProperty = _selectedPropertyType.GetProperty(propertyName);

            if (selectedProperty.PropertyType.IsClass && selectedProperty.PropertyType != typeof(string))
            {
                var navigationPropertyExpression = leftOperandExpression.ChangePropertyAccess(_selectedPropertyType, propertyName);
                _selectedPropertyType = navigationPropertyExpression.Type;

                selectedProperty = navigationPropertyExpression.Type.GetProperties().First();
                _selectedPropertyName = selectedProperty.Name;

                leftOperandExpression = Expression.MakeMemberAccess(
                    navigationPropertyExpression,
                    selectedProperty);

                _navigationPath.Add(propertyName);
            }
            else
            {
                _selectedPropertyName = propertyName;
                leftOperandExpression = leftOperandExpression.ChangePropertyAccess(_selectedPropertyType, propertyName);
            }

            Expression rightOperandExpression = selectedProperty.PropertyType switch
            {
                Type type when
                    type == typeof(int)
                    || type == typeof(long)
                    || type == typeof(string)
                    || type == typeof(bool) => Expression.Constant(selectedProperty.PropertyType.GetDefaultValue(), selectedProperty.PropertyType),
                Type type when
                    type == typeof(DateTime) => DateTimeExpression.New(DateTime.UtcNow),
                _ => throw new Exception("Unsupported property type")
            };

            _relationalOperators.SetOperand(selectedProperty.PropertyType);
            UpdateExpression(Expression.MakeBinary(_relationalOperators.ExpressionOperator.ExpressionType, leftOperandExpression, rightOperandExpression));
        }
    }

    private void OnValueChanged(int intValue) => UpdateRightOperandConstant(intValue);

    private void OnValueChanged(string stringValue) => UpdateRightOperandConstant(stringValue);

    private void OnValueChanged(bool boolValue) => UpdateRightOperandConstant(boolValue);

    private void OnValueChanged(DateTime? dateTime)
    {
        if (dateTime.HasValue)
        {
            UpdateRightOperand(DateTimeExpression.New(dateTime.Value));
        }
    }

    private void UpdateRightOperandConstant<T>(T value) => UpdateRightOperand(Expression.Constant(value, typeof(T)));

    private void UpdateRightOperand(Expression expression)
    {
        if (PredicateExpression is BinaryExpression binaryExpression)
        {
            UpdateExpression(binaryExpression.ReplaceRight(expression));
        }
        else if (PredicateExpression is MethodCallExpression methodCallExpression)
        {
            // TODO: Handle method call
            // UpdateExpression(methodCallExpression.ReplaceArgument(expression));
        }
    }

    private void OnOperatorChanged(RelationalOperators.Operator op)
    {
        if (PredicateExpression is BinaryExpression binaryExpression)
        {
            UpdateExpression(binaryExpression.ReplaceType(op.ExpressionType));
        }
        else if (PredicateExpression is MethodCallExpression methodCallExpression)
        {
            // TODO: Handle method call
        }
    }

    private void UpdateExpression(BinaryExpression expression)
    {
        PredicateExpression = expression;
        OnChange(expression);
        StateHasChanged();
    }

    private void Add(ExpressionType expressionType)
    {
        var leftOperand = Expression.MakeMemberAccess(ParameterExpression, ParameterExpression.Type.GetProperties().First());
        
        var rightOperandConstant = Expression.Constant(leftOperand.Type.GetDefaultValue(), leftOperand.Type);
        var rightOperand = Expression.MakeBinary(PredicateExpression.NodeType, leftOperand, rightOperandConstant);

        var expression = Expression.MakeBinary(
            expressionType,
            PredicateExpression.Copy(),
            rightOperand);

        OnChange(expression);
    }

    private void Remove()
    {
        OnRemove();
    }
}