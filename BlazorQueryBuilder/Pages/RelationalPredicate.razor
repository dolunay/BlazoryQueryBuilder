@using System.Linq.Expressions
@using System.Reflection
@using BlazorQueryBuilder.ExpressionVisitors.Extensions
@using BlazoryQueryBuilder.Shared.Extensions
@using BlazoryQueryBuilder.Shared.Services
@using BlazoryQueryBuilder.Shared.Util
@inject PredicateFactory PredicateFactory;

<MudStack Row>
    <MudSelect Label="Field" T="string" ValueChanged="OnFieldChanged" Value="_selectedPropertyName">
        @foreach (PropertyInfo property in _selectedPropertyType.GetProperties())
        {
            <MudSelectItem Value="@property.Name" style="@(@property.PropertyType.IsClass ? "font-weight: bold" : "")">
                @property.Name.ToString()
            </MudSelectItem>
        }
    </MudSelect>
    <RelationalOperators OnChange="@OnOperatorChanged" ExpressionType="@Binary.NodeType"></RelationalOperators>
    @switch (Type.GetTypeCode(Binary.Left.Type))
    {
        case TypeCode.Int32 when Binary.Right is ConstantExpression intConstant:
            <MudTextField Label="Value" T="int" Value="@((int)intConstant.Value)" ValueChanged="@OnValueChanged" />
            break;
        case TypeCode.String when Binary.Right is ConstantExpression stringConstant:
            <MudTextField Label="Value" T="string" Value="@(stringConstant.Value?.ToString())" ValueChanged="@OnValueChanged" />
            break;
        case TypeCode.Boolean when Binary.Right is ConstantExpression boolConstant:
            <MudCheckBox Label="Value" T="bool" Value="@((bool)boolConstant.Value)" ValueChanged="@OnValueChanged" />
            break;
        case TypeCode.DateTime when Binary.Right is NewExpression newDateTime:
            <MudDatePicker Label="Value" Date="@(new DateTime((long)((ConstantExpression)newDateTime.Arguments[0]).Value))" DateChanged="@OnValueChanged" />
            break;
    }
    <MudStack Row Spacing="2">
        <MudButton Variant="Variant.Filled" OnClick="@(() => Add(ExpressionType.AndAlso))">And</MudButton>
        <MudButton Variant="Variant.Filled" OnClick="@(() => Add(ExpressionType.OrElse))">Or</MudButton>
        <MudButton Variant="Variant.Filled" OnClick="Remove">Remove</MudButton>
    </MudStack>
</MudStack>

@code {
    [Parameter]
    public Action<BinaryExpression> OnChange { get; set; }

    [Parameter]
    public Action OnRemove { get; set; }

    [Parameter]
    public ParameterExpression Parameter { get; set; }

    [Parameter]
    public BinaryExpression Binary { get; set; }

    private MemberExpression _leftOperand => (MemberExpression)Binary.Left;
    private Type _selectedPropertyType;
    private string _selectedPropertyName;

    protected override void OnInitialized()
    {
        _selectedPropertyType = _leftOperand.Member.DeclaringType;
        _selectedPropertyName = _leftOperand.Member.Name;
        base.OnInitialized();
    }

    private void OnFieldChanged(string propertyName)
    {
        _selectedPropertyName = propertyName;
        var property = _selectedPropertyType.GetProperty(propertyName);

        MemberExpression leftOperand;

        // Navigation properties
        if (property.PropertyType.IsClass && property.PropertyType != typeof(string))
        {
            var navigationProperty = _leftOperand.ChangePropertyAccess(_selectedPropertyType, propertyName);

            _selectedPropertyType = navigationProperty.Type;

            property = navigationProperty.Type.GetProperties().First();

            leftOperand = Expression.MakeMemberAccess(
                navigationProperty,
                navigationProperty.Type.GetProperties().First());
        }
        // Simple properties
        else
        {
            leftOperand = _leftOperand.ChangePropertyAccess(_selectedPropertyType, propertyName);
        }

        Expression rightOperand = property.PropertyType switch
        {
            Type type when Type.GetTypeCode(type) 
                is TypeCode.Int32 
                or TypeCode.String 
                or TypeCode.Boolean => Expression.Constant(property.PropertyType.GetDefaultValue(), property.PropertyType),
            Type type when Type.GetTypeCode(type) 
                is TypeCode.DateTime => DateTimeExpression.New(DateTime.UtcNow),
            _ => throw new Exception("Unsupported property type")
        };

        UpdateExpression(Expression.MakeBinary(Binary.NodeType, leftOperand, rightOperand));
    }

    private void OnValueChanged(int intValue) => UpdateRightOperandConstant(intValue);

    private void OnValueChanged(string stringValue) => UpdateRightOperandConstant(stringValue);

    private void OnValueChanged(bool boolValue) => UpdateRightOperandConstant(boolValue);

    private void OnValueChanged(DateTime? dateTime)
    {
        if (dateTime.HasValue)
        {
            UpdateRightOperand(DateTimeExpression.New(dateTime.Value));
        }
    }

    private void UpdateRightOperandConstant<T>(T value) => UpdateRightOperand(Expression.Constant(value, typeof(T)));

    private void UpdateRightOperand(Expression expression) => UpdateExpression(Binary.ReplaceRight(expression));

    private void OnOperatorChanged(ExpressionType expressionType) => UpdateExpression(Binary.ReplaceType(expressionType));

    private void UpdateExpression(BinaryExpression newBinary)
    {
        OnChange(newBinary);
        StateHasChanged();
    }

    private void Add(ExpressionType expressionType)
    {
        var newMemberAccess = Expression.MakeMemberAccess(Parameter, Parameter.Type.GetProperties().First());
        var newConstant = Expression.Constant(newMemberAccess.Type.GetDefaultValue(), newMemberAccess.Type);
        var newRight = Expression.MakeBinary(Binary.NodeType, newMemberAccess, newConstant);

        var newBinary = Expression.MakeBinary(
            expressionType,
            Binary.Copy(),
            newRight);

        OnChange(newBinary);
    }

    private void Remove()
    {
        OnRemove();
    }

}