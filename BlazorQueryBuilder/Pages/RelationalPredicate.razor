@using System.Linq.Expressions
@using System.Reflection
@using BlazorQueryBuilder.Visitors
@using BlazoryQueryBuilder.Shared.Extensions
@using BlazoryQueryBuilder.Shared.Services
@inject PredicateFactory PredicateFactory;

<MudStack Row>
    <MudSelect T="string" ValueChanged="OnMemberAccessChange" Value="selectedPropertyName">
        @foreach (PropertyInfo property in _entityType.GetProperties())
        {
            <MudSelectItem Value="@property.Name" style="@(@property.PropertyType.IsClass ? "font-weight: bold" : "")">
                @property.Name.ToString()
            </MudSelectItem>
        }
    </MudSelect>
    <RelationalOperators OnChange="@OnOperatorChanged" ExpressionType="@Binary.NodeType"></RelationalOperators>
    <MudTextField T="string" Value="@(Constant.Value?.ToString())" ValueChanged="@OnConstantChange" />
    <MudStack Row Spacing="2">
        <MudButton Variant="Variant.Filled" OnClick="@(() => Add(ExpressionType.AndAlso))">And</MudButton>
        <MudButton Variant="Variant.Filled" OnClick="@(() => Add(ExpressionType.OrElse))">Or</MudButton>
        <MudButton Variant="Variant.Filled" OnClick="Remove">Remove</MudButton>
    </MudStack>
</MudStack>

@code {
    MemberExpression Member => (MemberExpression)Binary.Left;
    ConstantExpression Constant => (ConstantExpression)Binary.Right;
    private Type _entityType;
    private string selectedPropertyName;

    [Parameter]
    public Action<BinaryExpression> OnChange { get; set; }

    [Parameter]
    public Action OnRemove { get; set; }

    [Parameter]
    public ParameterExpression Parameter { get; set; }

    [Parameter]
    public BinaryExpression Binary { get; set; }

    protected override void OnInitialized()
    {
        _entityType = Member.Member.DeclaringType;
        OnMemberAccessChange(_entityType.GetProperties().First().Name);
        base.OnInitialized();
    }

    private void OnMemberAccessChange(string entityPropertyName)
    {
        selectedPropertyName = entityPropertyName;
        PropertyInfo entityProperty = _entityType.GetProperty(entityPropertyName);

        MemberExpression newMember;

        if (entityProperty.PropertyType.IsClass && entityProperty.PropertyType != typeof(string))
        {
            MemberExpression classMember = new ChangeMemberProperty(_entityType, Member, entityPropertyName).Change();

            // set the new entity type as the class member
            _entityType = classMember.Type;

            entityProperty = classMember.Type.GetProperties().First();

            newMember = Expression.MakeMemberAccess(
                classMember,
                classMember.Type.GetProperties().First());
        }
        else
        {
            newMember = new ChangeMemberProperty(_entityType, Member, entityPropertyName).Change();
        }

        ConstantExpression newConstant = Expression.Constant(entityProperty.PropertyType.GetDefaultValue(), entityProperty.PropertyType);
        BinaryExpression newRelational = Expression.MakeBinary(Binary.NodeType, newMember, newConstant);
        UpdateExpression(newRelational);
    }

    private void OnConstantChange(object constant)
    {
        if (Binary.Left.Type.IsAssignableFrom(typeof(Int32)))
        {
            int value = Int32.Parse(constant.ToString());
            BinaryExpression newRelational = new ReplaceBinaryRight(Binary, Expression.Constant(value)).Replace();
            UpdateExpression(newRelational);
            return;
        }

        if (Binary.Left.Type.IsAssignableFrom(typeof(string)))
        {
            BinaryExpression newRelational = new ReplaceBinaryRight(Binary, Expression.Constant((string)constant)).Replace();
            UpdateExpression(newRelational);
        }
    }

    private void OnOperatorChanged(ExpressionType expressionType)
    {
        var newRelational = new ReplaceBinaryType(Binary, expressionType).Replace();
        Console.WriteLine(newRelational);
        UpdateExpression(newRelational);
    }

    private void UpdateExpression(BinaryExpression newBinary)
    {
        OnChange(newBinary);
        StateHasChanged();
    }

    private void Add(ExpressionType expressionType)
    {
        MemberExpression newMemberAccess = Expression.MakeMemberAccess(Parameter, Parameter.Type.GetProperties().First());
        ConstantExpression newConstant = Expression.Constant(newMemberAccess.Type.GetDefaultValue(), newMemberAccess.Type);
        BinaryExpression newRight = Expression.MakeBinary(Binary.NodeType, newMemberAccess, newConstant);

        BinaryExpression newBinary = Expression.MakeBinary(
            expressionType,
            new CopyExpression(Binary).Copy(),
            newRight);

        Console.WriteLine(newBinary);

        OnChange(newBinary);
    }

    private void Remove()
    {
        OnRemove();
    }

}