@using System.Linq.Expressions
@using System.Reflection
@using BlazorQueryBuilder.ExpressionVisitors
@using BlazoryQueryBuilder.Shared.Extensions
@using BlazoryQueryBuilder.Shared.Services
@inject PredicateFactory PredicateFactory;

<MudStack Row>
    <MudSelect Label="Field" T="string" ValueChanged="OnMemberAccessChange" Value="_selectedPropertyName">
        @foreach (PropertyInfo property in _entityType.GetProperties())
        {
            <MudSelectItem Value="@property.Name" style="@(@property.PropertyType.IsClass ? "font-weight: bold" : "")">
                @property.Name.ToString()
            </MudSelectItem>
        }
    </MudSelect>
    <RelationalOperators OnChange="@OnOperatorChanged" ExpressionType="@Binary.NodeType"></RelationalOperators>
    @if (Binary.Right is ConstantExpression constant)
    {
        @switch (Type.GetTypeCode(Binary.Left.Type))
        {
            case TypeCode.Int32:
                <MudTextField Label="Value" T="int" Value="@((int)constant.Value)" ValueChanged="@OnConstantChange" />
                break;
            case TypeCode.String:
                <MudTextField Label="Value" T="string" Value="@(constant.Value?.ToString())" ValueChanged="@OnConstantChange" />
                break;
            case TypeCode.Boolean:
                <MudCheckBox Label="Value" T="bool" Value="@(bool.Parse(constant.Value?.ToString()))" ValueChanged="@OnConstantChange" />
                break;
        }
    }
    @if (Binary.Right is NewExpression newExpression)
    {
        @switch (Type.GetTypeCode(Binary.Left.Type))
        {
            case TypeCode.DateTime:
                <MudDatePicker Label="Value" Date="@(new DateTime((long)((ConstantExpression)newExpression.Arguments[0]).Value))" DateChanged="@OnConstantChange" />
                break;
        }           
    }
    <MudStack Row Spacing="2">
        <MudButton Variant="Variant.Filled" OnClick="@(() => Add(ExpressionType.AndAlso))">And</MudButton>
        <MudButton Variant="Variant.Filled" OnClick="@(() => Add(ExpressionType.OrElse))">Or</MudButton>
        <MudButton Variant="Variant.Filled" OnClick="Remove">Remove</MudButton>
    </MudStack>
</MudStack>

@code {
    MemberExpression Member => (MemberExpression)Binary.Left;
    ConstantExpression Constant => (ConstantExpression)Binary.Right;
    private Type _entityType;
    private string _selectedPropertyName;

    [Parameter]
    public Action<BinaryExpression> OnChange { get; set; }

    [Parameter]
    public Action OnRemove { get; set; }

    [Parameter]
    public ParameterExpression Parameter { get; set; }

    [Parameter]
    public BinaryExpression Binary { get; set; }

    protected override void OnInitialized()
    {
        _entityType = Member.Member.DeclaringType;
        _selectedPropertyName = Member.Member.Name;
        base.OnInitialized();
    }

    private void OnMemberAccessChange(string entityPropertyName)
    {
        _selectedPropertyName = entityPropertyName;
        PropertyInfo entityProperty = _entityType.GetProperty(entityPropertyName);

        MemberExpression newMember;

        if (entityProperty.PropertyType.IsClass && entityProperty.PropertyType != typeof(string))
        {
            MemberExpression classMember = ExpressionVisitorFactory.ChangePropertyAccess(Member, _entityType, entityPropertyName).Execute();

            // set the new entity type as the class member
            _entityType = classMember.Type;

            entityProperty = classMember.Type.GetProperties().First();

            newMember = Expression.MakeMemberAccess(
                classMember,
                classMember.Type.GetProperties().First());
        }
        else
        {
            newMember = ExpressionVisitorFactory.ChangePropertyAccess(Member, _entityType, entityPropertyName).Execute();
        }

        switch (Type.GetTypeCode(entityProperty.PropertyType))
        {
            case TypeCode.Int32:
                ConstantExpression newIntConstant = Expression.Constant(entityProperty.PropertyType.GetDefaultValue(), entityProperty.PropertyType);
                BinaryExpression newIntRelational = Expression.MakeBinary(Binary.NodeType, newMember, newIntConstant);
                UpdateExpression(newIntRelational);
                break;
            case TypeCode.String:
                ConstantExpression newStringConstant = Expression.Constant(entityProperty.PropertyType.GetDefaultValue(), entityProperty.PropertyType);
                BinaryExpression newStringRelational = Expression.MakeBinary(Binary.NodeType, newMember, newStringConstant);
                UpdateExpression(newStringRelational);
                break;
            case TypeCode.Boolean:
                ConstantExpression newBoolConstant = Expression.Constant(entityProperty.PropertyType.GetDefaultValue(), entityProperty.PropertyType);
                BinaryExpression newBoolRelational = Expression.MakeBinary(Binary.NodeType, newMember, newBoolConstant);
                UpdateExpression(newBoolRelational);
                break;
            case TypeCode.DateTime:
                var dateTimeConstructor = typeof(DateTime).GetConstructor(new[] { typeof(long) });
                var ticksExpression = Expression.Constant(DateTime.UtcNow.Ticks, typeof(long));
                var newDateTimeExpression = Expression.New(dateTimeConstructor, ticksExpression);
                BinaryExpression newDateTimeRelational = Expression.MakeBinary(Binary.NodeType, newMember, newDateTimeExpression);
                UpdateExpression(newDateTimeRelational);
                break;
        }
    }

    private void OnConstantChange(int constant)
    {
        BinaryExpression newIntRelational = ExpressionVisitorFactory.ReplaceBinaryRight(Binary, Expression.Constant(constant)).Execute();
        UpdateExpression(newIntRelational);
    }

    private void OnConstantChange(string constant)
    {
        BinaryExpression newStringRelational = ExpressionVisitorFactory.ReplaceBinaryRight(Binary, Expression.Constant((string)constant)).Execute();
        UpdateExpression(newStringRelational);
    }

    private void OnConstantChange(bool constant)
    {
        BinaryExpression newBoolRelational = ExpressionVisitorFactory.ReplaceBinaryRight(Binary, Expression.Constant(constant, typeof(bool))).Execute();
        UpdateExpression(newBoolRelational);
    }

    private void OnConstantChange(DateTime? constant)
    {
        if (constant.HasValue)
        {
            var dateTimeConstructor = typeof(DateTime).GetConstructor(new[] { typeof(long) });
            var ticksExpression = Expression.Constant(constant.Value.Ticks, typeof(long));
            var newDateTimeExpression = Expression.New(dateTimeConstructor, ticksExpression);
            BinaryExpression newDateTimeRelational = ExpressionVisitorFactory.ReplaceBinaryRight(Binary, newDateTimeExpression).Execute();
            UpdateExpression(newDateTimeRelational);
        }
    }

    private void OnOperatorChanged(ExpressionType expressionType)
    {
        var newRelational = new ReplaceBinaryType(Binary, expressionType).Execute();
        Console.WriteLine(newRelational);
        UpdateExpression(newRelational);
    }

    private void UpdateExpression(BinaryExpression newBinary)
    {
        OnChange(newBinary);
        StateHasChanged();
    }

    private void Add(ExpressionType expressionType)
    {
        MemberExpression newMemberAccess = Expression.MakeMemberAccess(Parameter, Parameter.Type.GetProperties().First());
        ConstantExpression newConstant = Expression.Constant(newMemberAccess.Type.GetDefaultValue(), newMemberAccess.Type);
        BinaryExpression newRight = Expression.MakeBinary(Binary.NodeType, newMemberAccess, newConstant);

        BinaryExpression newBinary = Expression.MakeBinary(
            expressionType,
            new CopyExpression(Binary).Copy(),
            newRight);

        Console.WriteLine(newBinary);

        OnChange(newBinary);
    }

    private void Remove()
    {
        OnRemove();
    }

}