@using System.Reflection
@using BlazoryQueryBuilder.Shared.Models
@using System.Linq.Dynamic.Core
@using System.Linq.Expressions
@using Microsoft.EntityFrameworkCore
@using MudBlazor
@typeparam TDbContext where TDbContext : DbContext
@inject TDbContext DbContext

<MudToolBar Gutters="false" Class="mb-4">
    <MudStack Row Spacing="3">
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="NewQuery">New Query</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@OpenDialog">Load Query</MudButton>
    </MudStack>
</MudToolBar>

<MudDialog @bind-Visible="_showLoadQueryDialog" Options="_loadQueryDialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3" /> Load Query
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudSelect T="string" @bind-Value="_selectedQuery" Label="Select Query">
            @foreach (var query in _queries)
            {
                <MudSelectItem Value="@query">@query</MudSelectItem>
            }
        </MudSelect>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="px-10" OnClick="@LoadQuery" Disabled="@(string.IsNullOrWhiteSpace(_selectedQuery))">Ok</MudButton>
    </DialogActions>
</MudDialog>

<MudStack Spacing="5"> 
    <MudStack Spacing="10">
        @if (_state is New)
        {
            <MudStack Spacing="2">
                <MudItem xs="12">
                    <MudText Typo="Typo.h5">FROM</MudText>
                    <MudSelect T="string" Label="Entity" ValueChanged="OnEntitySelect">
                        @foreach (var entity in _entities)
                        {
                            <MudSelectItem Value="@entity">@entity</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
            </MudStack>
        }
        <div>
            @CreateQueryBuilder()
        </div>
    </MudStack>
</MudStack>

@code {
    Type SelectedEntityType;

    private string _selectedQuery;
    private string[] _entities = Array.Empty<string>();
    private IEnumerable<string> _queries = new[] 
    { 
        "worker => ((worker.PersonId == \"1\") OrElse (worker.PersonId == \"2\"))", 
        "worker => worker.LastName == \"Jones\""
    };
    private DialogOptions _loadQueryDialogOptions = new DialogOptions { CloseButton = true };
    private bool _showLoadQueryDialog = false;

    RenderFragment CreateQueryBuilder() => builder =>
    {
        _state = _state.DisplayBuilder(() =>
        {
            builder.OpenComponent(0, typeof(QueryBuilder<,>).MakeGenericType(typeof(TDbContext), SelectedEntityType));
            builder.AddAttribute(1, "Expression", Expression);
            builder.CloseComponent();
        });
    };

    private string Expression { get; set; } = string.Empty;

    private IQueryBuilderState _state = new None();

    protected override void OnInitialized()
    {
        _entities = DbContext
            .Model
            .GetEntityTypes()
            .Select(e => e.ClrType.Name)
            .ToArray();

        NewQuery();

        base.OnInitialized();
    }

    public void OnEntitySelect(string value)
    {
        Expression = string.Empty;
        SelectEntity(value);
    }

    private void SelectEntity(string entityTypeName)
    {
        var typeName = $"BlazoryQueryBuilder.Shared.Models.{(string)entityTypeName}";
        Assembly assembly = typeof(Person).Assembly;
        SelectedEntityType = assembly.GetType(typeName);
        StateHasChanged();
    }

    private void OpenDialog()
    {
        _showLoadQueryDialog = true;
    }

    public void LoadQuery()
    {
        _state = new Loaded();
        // TODO: move entity type selection to dialog
        string entityType = nameof(Person);
        Expression = _selectedQuery;
        SelectEntity(entityType);
        _showLoadQueryDialog = false;
    }

    public void NewQuery()
    {
        _state = new New();
        SelectEntity(_entities.FirstOrDefault());
        Expression = string.Empty;
    }
}