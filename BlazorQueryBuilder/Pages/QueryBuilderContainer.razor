@using System.Reflection
@using BlazoryQueryBuilder.Shared.Models
@using System.Linq.Dynamic.Core
@using System.Linq.Expressions
@using MudBlazor

<MudStack Spacing="5"> 
    @if (_queryLoaded || _newQuery)
    {
        <div>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@StartOver">Start Over</MudButton>
        </div>
    }
    else
    {
        <MudStack Spacing="10">
            <div>
                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="NewQuery">New Query</MudButton>
            </div>
            <div>
                <MudStack>
                    <div>
                        <MudButton Disabled="@(string.IsNullOrWhiteSpace(_selectedQuery))" Color="Color.Primary" Variant="Variant.Filled" OnClick="@LoadQuery">Load Query</MudButton>
                    </div>
                    <div>
                        <MudSelect T="string" @bind-Value="_selectedQuery" Label="Select Query">
                            @foreach (var query in _queries)
                            {
                                <MudSelectItem Value="@query">@query</MudSelectItem>
                            }
                        </MudSelect>
                    </div>
                </MudStack>
            </div>
        </MudStack>
    }

    <MudStack Spacing="5">
        @if (_newQuery)
        {
            <MudStack Spacing="2">
                <MudItem xs="12">
                    <MudText Typo="Typo.h5">FROM</MudText>
                    <MudSelect T="string" Label="Entity" ValueChanged="Select">
                        @foreach (var entity in Entities)
                        {
                            <MudSelectItem Value="@entity">@entity</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
            </MudStack>
        }

        <div>
            @CreateQueryBuilder()
        </div>
    </MudStack>
</MudStack>



@code {

    string[] Entities = new[] { nameof(Person), nameof(Address) };

    Type SelectedEntityType;
    // string SelectedEntityTypeName;

    private bool _newQuery = false;
    private bool _queryLoaded = false;
    private string _selectedQuery;
    private IEnumerable<string> _queries = new[] 
    { 
        "worker => ((worker.PersonId == \"1\") OrElse (worker.PersonId == \"2\"))", 
        "worker => worker.LastName == \"Jones\""
    };

    RenderFragment CreateQueryBuilder() => builder =>
    {
        _state = _state.DisplayBuilder(() =>
        {
            builder.OpenComponent(0, typeof(QueryBuilder<>).MakeGenericType(SelectedEntityType));
            builder.AddAttribute(1, "Expression", Expression);
            builder.CloseComponent();
        });

    };

    private string Expression { get; set; } = string.Empty;

    private IQueryBuilderState _state = new None();

    protected override void OnInitialized()
    {
    }

    public void Select(string value)
    {
        Expression = string.Empty;
        SelectEntity(value);
    }

    private void SelectEntity(string entityTypeName)
    {
        var typeName = $"BlazoryQueryBuilder.Shared.Models.{(string)entityTypeName}";
        Assembly assembly = typeof(Person).Assembly;
        SelectedEntityType = assembly.GetType(typeName);
        StateHasChanged();
    }

    public void LoadQuery()
    {
        _state = new Loaded();
        string entityType = nameof(Person);
        Expression<Func<Person, bool>> expression = worker => worker.PersonId == "1" || worker.PersonId == "2";
        // Expression = expression.ToString();
        Expression = _selectedQuery;
        SelectEntity(entityType);
        _queryLoaded = true;
    }

    public void NewQuery()
    {
        _state = new New();
        SelectEntity(Entities[0]);
        Expression = string.Empty;
        _newQuery = true;
    }

    public void StartOver()
    {
        _state = new None();
        _newQuery = false;
        _queryLoaded = false;
        SelectedEntityType = null;
    }
}