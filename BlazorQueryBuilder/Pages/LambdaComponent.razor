@using System.Linq.Expressions
@using System.Reflection
@using BlazoryQueryBuilder.Shared.Models
@using BlazorQueryBuilder.Visitors
@using MudBlazor

<MudStack Row Spacing="4">
    <MudItem xs="8" lg="8">
        <Predicate Expression="@GetBodyAsBinary()"
                   Parameter="@Parameter"
                   OnChange="@OnChangeBody">
        </Predicate>
    </MudItem>
    <MudItem xs="4" lg="4">
        <MudExpansionPanels>
            <MudExpansionPanel Text="View Lambda Expression" Expanded="false">
                <code>@Lambda.ToString()</code>
            </MudExpansionPanel>
        </MudExpansionPanels>
    </MudItem>
</MudStack>

@code {
    [Parameter]
    public LambdaExpression Lambda { get; set; }

    [Parameter]
    public ParameterExpression Parameter { get; set; }

    [Parameter]
    public Action<Expression> OnChanged { get; set; }

    protected override void OnInitialized()
    {
        OnChanged(Lambda.Body);
    }

    private BinaryExpression GetBodyAsBinary()
    {
        return Lambda.Body as BinaryExpression;
    }

    private void OnChangeBody(Expression body)
    {
        OnChanged(body);
        StateHasChanged();
    }
}