@page "/query"
@using System.Linq.Expressions
@using System.Linq.Dynamic
@using System.Linq.Dynamic.Core
@using System.Reflection
@using Newtonsoft.Json
@using BlazorQueryBuilder.Visitors
@using BlazoryQueryBuilder.Shared.Models
@using BlazoryQueryBuilder.Shared.Services
@* Importing Microsoft.CodeAnalysis* will cause an error in the app, due to something having to do with the mono linker and long lists of assemblies
    The issues is documented here https://github.com/mono/linker/issues/379 
    Awaiting a fix *@
@*@using Microsoft.CodeAnalysis.CSharp.Scripting*@
@*@using Microsoft.CodeAnalysis.Scripting*@
@inject PredicateFactory PredicateFactory
@inject HttpClient HttpClient
@inject QueryBuilderService<TEntity> QueryBuilderService
@typeparam TEntity

<h1>Expression</h1>
<div class="row">
    <div class="col-12">
        <LambdaComponent OnChanged="@OnChanged"
                         Lambda="@QueryBuilderService.Lambda"
                         Parameter="@QueryBuilderService.Parameter"></LambdaComponent>
    </div>
</div>

<div class="row">
    <div class="col-12">
        <button class="btn btn-primary" onclick="@RunQuery">Run Query</button>
    </div>
</div>
<div class="row">
    <div class="col-12">
        @if (!_data.Any())
        {
            <div>No results.</div>
        }
        @foreach (var data in _data)
        {
            <ul>
                <li>@(JsonConvert.SerializeObject(data))</li>
            </ul>
        }
    </div>
</div>

@functions {

    List<TEntity> _data = new List<TEntity>();

    Expression<Func<TEntity, bool>> Predicate => (Expression<Func<TEntity, bool>>)QueryBuilderService.Lambda;

    [Parameter]
    string Expression { get; set; }

    protected override void OnInit()
    {
        if (string.IsNullOrWhiteSpace(Expression))
        {
            QueryBuilderService.LoadEntity();
        }
        else
        {
            QueryBuilderService.LoadQuery(Expression);
        }
    }

    private async Task RunQuery()
    {
        Func<TEntity, bool> predicate = Predicate.Compile();
        var data = await HttpClient.SendJsonAsync<IEnumerable<TEntity>>(
            HttpMethod.Post, 
            "https://localhost:44338/api/values", 
            new BlazoryQueryBuilder.Shared.Models.Predicate 
            { 
                LambdaExpression = Predicate.ToString(), 
                EntityType = typeof(TEntity).Name,
            }); 

        _data = data.ToList();
    }

    private void OnChanged(Expression body)
    {
        LambdaExpression newLambda = new ReplaceLambdaBody(QueryBuilderService.Lambda, body).Replace();
        QueryBuilderService.Lambda = newLambda;
        StateHasChanged();
    }

}