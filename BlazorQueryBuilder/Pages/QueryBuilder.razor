@using System.Linq.Expressions
@using System.Linq.Dynamic
@using System.Linq.Dynamic.Core
@using Microsoft.EntityFrameworkCore
@using Newtonsoft.Json
@using BlazorQueryBuilder.ExpressionVisitors.Extensions;
@using BlazoryQueryBuilder.Shared.Models
@using BlazoryQueryBuilder.Shared.Services
@using System.Reflection
@using System.Collections
@typeparam TDbContext where TDbContext : DbContext
@typeparam TEntity where TEntity : class
@inject PredicateFactory PredicateFactory
@inject QueryBuilderService<TEntity> QueryBuilderService
@inject IQueryServiceFactory<TDbContext> QueryServiceFactory

<MudStack Spacing="5">
    <div>
        <MudText Typo="Typo.h5">SELECT</MudText>
        <MudSelect Label="Fields" T="PropertyInfo" @bind-SelectedValues="SelectedProperties" MultiSelection="true">
            @foreach (var property in typeof(TEntity).GetProperties())
            {
                <MudSelectItem T="PropertyInfo" Value="property">
                    @property.Name
                </MudSelectItem>
            }
        </MudSelect>
    </div>

    <MudText Typo="Typo.h5">WHERE</MudText>
    <LambdaComponent OnChanged="@OnChanged"
                     Lambda="@QueryBuilderService.Lambda"
                     Parameter="@QueryBuilderService.Parameter">
    </LambdaComponent>

    <div>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="RunQuery">Run Query</MudButton>
    </div>

    <MudTable Items="_data" Bordered="true" Striped="true">
        <HeaderContent>
            @foreach (var property in SelectedProperties)
            {
                <MudTh>@property.Name</MudTh>
            }
        </HeaderContent>
        <RowTemplate>
            @foreach (var property in SelectedProperties)
            {
                <MudTd>@context.GetType().GetProperty(property.Name).GetValue(context, null)</MudTd>
            }
        </RowTemplate>
    </MudTable>

</MudStack>

@code {

    [Parameter]
    public string Expression { get; set; }

    private List<TEntity> _data = new List<TEntity>();
    private Expression<Func<TEntity, bool>> Predicate => (Expression<Func<TEntity, bool>>)QueryBuilderService.Lambda;
    private IEnumerable<PropertyInfo> SelectedProperties = new List<PropertyInfo>();

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    protected override void OnInitialized()
    {
        if (string.IsNullOrWhiteSpace(Expression))
        {
            QueryBuilderService.LoadEntity();
        }
        else
        {
            QueryBuilderService.LoadQuery(Expression);
        }
    }

    private async Task RunQuery()
    {
        Func<TEntity, bool> predicate = Predicate.Compile();
        var predicateModel = new BlazoryQueryBuilder.Shared.Models.Predicate
        {
            LambdaExpression = Predicate.ToString(),
            EntityName = typeof(TEntity).Name,
            EntityType = typeof(TEntity).FullName,
            SelectedProperties = SelectedProperties.Select(prop => prop.Name).ToList()
        };
        var data = await ExecuteQuery(predicateModel) as IEnumerable<TEntity>;

        _data = data.ToList();
    }

    private void OnChanged(Expression body)
    {
        var newLambda = QueryBuilderService.Lambda.ReplaceBody(body);
        QueryBuilderService.Lambda = newLambda;
        StateHasChanged();
    }

    public async Task<IEnumerable> ExecuteQuery(BlazoryQueryBuilder.Shared.Models.Predicate predicate)
    {
        IQueryService<TEntity> queryService = QueryServiceFactory.Create<TEntity>();

        IEnumerable data = await queryService.QueryData(Predicate, predicate.SelectedProperties);
        return data;
    }
}