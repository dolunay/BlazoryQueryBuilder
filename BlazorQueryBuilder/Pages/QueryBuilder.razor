@page "/query"
@using System.Linq.Expressions
@using System.Linq.Dynamic
@using System.Linq.Dynamic.Core
@using Newtonsoft.Json
@using BlazorQueryBuilder.Visitors
@using BlazoryQueryBuilder.Shared.Models
@using BlazoryQueryBuilder.Shared.Services
@using System.Reflection
@using System.Collections
@inject PredicateFactory PredicateFactory
@inject QueryBuilderService<TEntity> QueryBuilderService
@inject QueryServiceFactory<MyDbContext> QueryServiceFactory
@typeparam TEntity

<MudStack Spacing="5">
    <div>
        <MudText Typo="Typo.h5">Properties</MudText>
        <MudSelect Label="Select Properties" T="PropertyInfo" @bind-SelectedValues="SelectedProperties" MultiSelection="true">
            @foreach (var property in typeof(TEntity).GetProperties())
            {
                <MudSelectItem T="PropertyInfo" Value="property">@property.Name</MudSelectItem>
            }
        </MudSelect>
    </div>

    <MudText Typo="Typo.h4">Query</MudText>
    <div class="row">
        <div class="col-12">
            <LambdaComponent OnChanged="@OnChanged"
                             Lambda="@QueryBuilderService.Lambda"
                             Parameter="@QueryBuilderService.Parameter">
            </LambdaComponent>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <button class="btn btn-primary" @onclick="@RunQuery">Run Query</button>
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            @if (!_data.Any())
            {
                <div>No results.</div>
            }
            @foreach (var data in _data)
            {
                <ul>
                    <li>@(JsonConvert.SerializeObject(data))</li>
                </ul>
            }
        </div>
    </div>

</MudStack>

@code {
    List<TEntity> _data = new List<TEntity>();

    Expression<Func<TEntity, bool>> Predicate => (Expression<Func<TEntity, bool>>)QueryBuilderService.Lambda;
    IEnumerable<PropertyInfo> SelectedProperties = new List<PropertyInfo>();

    [Parameter]
    public string Expression { get; set; }

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    protected override void OnInitialized()
    {
        if (string.IsNullOrWhiteSpace(Expression))
        {
            QueryBuilderService.LoadEntity();
        }
        else
        {
            QueryBuilderService.LoadQuery(Expression);
        }
    }

    private async Task RunQuery()
    {
        Func<TEntity, bool> predicate = Predicate.Compile();
        var predicateModel = new BlazoryQueryBuilder.Shared.Models.Predicate
        {
                LambdaExpression = Predicate.ToString(),
                EntityType = typeof(TEntity).Name,
                SelectedProperties = SelectedProperties.Select(prop => prop.Name).ToList()
        };
        var data = await ExecuteQuery(predicateModel) as IEnumerable<TEntity>;

        _data = data.ToList();
    }

    private void OnChanged(Expression body)
    {
        LambdaExpression newLambda = new ReplaceLambdaBody(QueryBuilderService.Lambda, body).Replace();
        QueryBuilderService.Lambda = newLambda;
        StateHasChanged();
    }

    public async Task<IEnumerable> ExecuteQuery(BlazoryQueryBuilder.Shared.Models.Predicate predicate)
    {
        IQueryService queryService = QueryServiceFactory.Create(predicate.EntityType);
        IEnumerable data = await queryService.QueryData(predicate.LambdaExpression, predicate.SelectedProperties);
        return data;
    }
}