@page "/query-builder-main"
@page "/"
@using System.Reflection
@using BlazoryQueryBuilder.Shared.Models
@using System.Linq.Dynamic.Core
@using System.Linq.Expressions
@using MudBlazor

<MudStack Row Spacing="2"> 
    @if (_queryLoaded || _newQuery)
    {
        <MudButton Color="Color.Primary" OnClick="@StartOver">Start Over</MudButton>
    }
    else
    {
        <MudButton Color="Color.Primary" OnClick="@LoadQuery">Load Query</MudButton>
        <MudButton Color="Color.Primary" OnClick="NewQuery">New Query</MudButton>
    }
</MudStack>

<MudStack Spacing="5">
    @if (_newQuery)
    {
        <MudStack Spacing="2">
            <MudItem xs="12">
                <MudText Typo="Typo.h4">Entity</MudText>
                <MudSelect T="string" Label="Select Entity" ValueChanged="Select">
                    @foreach (var entity in Entities)
                    {
                        <MudSelectItem Value="@entity">@entity</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
        </MudStack>
    }

    <div>
        @CreateQueryBuilder()
    </div>
</MudStack>

@code {

    string[] Entities = new[] { nameof(Person), nameof(Address) };

    Type SelectedEntityType;
    string SelectedEntityTypeName;

    private bool _newQuery = false;
    private bool _queryLoaded = false;

    RenderFragment CreateQueryBuilder() => builder =>
    {
        _state = _state.DisplayBuilder(() =>
        {
            builder.OpenComponent(0, typeof(QueryBuilder<>).MakeGenericType(SelectedEntityType));
            builder.AddAttribute(1, "Expression", Expression);
            builder.CloseComponent();
        });

    };

    private string Expression { get; set; } = string.Empty;

    private IQueryBuilderState _state = new None();

    protected override void OnInitialized()
    {
    }

    public void Select(string value)
    {
        Expression = string.Empty;
        SelectEntity(value);
    }

    private void SelectEntity(string entityTypeName)
    {
        var typeName = $"BlazoryQueryBuilder.Shared.Models.{(string)entityTypeName}";
        Assembly assembly = typeof(Person).Assembly;
        SelectedEntityType = assembly.GetType(typeName);
        StateHasChanged();
    }

    public void LoadQuery()
    {
        _state = new Loaded();
        string entityType = nameof(Person);
        Expression<Func<Person, bool>> expression = worker => worker.PersonId == "820009398";
        Expression = expression.ToString();
        SelectEntity(entityType);
        _queryLoaded = true;
    }

    public void NewQuery()
    {
        _state = new New();
        SelectEntity(Entities[0]);
        Expression = string.Empty;
        _newQuery = true;
    }

    public void StartOver()
    {
        _state = new None();
        _newQuery = false;
        _queryLoaded = false;
        SelectedEntityType = null;
    }
}